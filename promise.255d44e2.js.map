{"version":3,"sources":["task3.js","task1.js","task2.js","promise.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","Promise","onSuccess","onError","setTimeout","id","time","logSuccess","console","log","logError","warn","amount","then","catch","ms","resolve","logger","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table"],"mappings":";;;AAAA,MAAMA,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,IACjBC,MAAAA,EAAQR,EAA0B,IAAK,KACtC,OAAA,IAAIS,QAAQ,CAACC,EAAWC,KAC7BC,WAAW,KACUT,KAAKE,SAAW,GAGjCK,EAAU,CAAEG,GAAIN,EAAYM,GAAIC,KAAMN,IAEtCG,EAAQJ,EAAYM,KAErBL,MAIDO,EAAa,EAAEF,GAAAA,EAAIC,KAAAA,MACvBE,QAAQC,mBAAmBJ,kBAAmBC,QAG1CI,EAAWL,IACfG,QAAQG,qCAAqCN,+BAI/CP,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ,GAETZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ,GAETZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,KAC/BC,KAAKN,GACLO,MAAMJ,GAETZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ;;AC1CT,MAAMV,EAAQe,GAEH,IAAId,QAASe,IAClBZ,WAAW,OAENJ,KAILiB,EAASX,GAAQE,QAAQC,sBAAsBH,OAGrDN,EAAM,KAAMa,KAAKI,GACjBjB,EAAM,KAAMa,KAAKI,GACjBjB,EAAM,MAAMa,KAAKI;;ACdjB,MAAMC,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,IACxB,IAAItB,QAASe,IAIhBA,EAHqBM,EAASE,IAAIC,GACtCA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,MAY3DR,EAASS,GAAgBlB,QAAQmB,MAAMD,GAW7CL,EAAgBH,EAAO,SAASL,KAAKI,GACrCI,EAAgBH,EAAO,OAAOL,KAAKI;;AC/BnC,aAHA,QAAA,oBACA,QAAA,WACA,QAAA,WACA,QAAA","file":"promise.255d44e2.js","sourceRoot":"../src","sourcesContent":["const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  const delay = randomIntegerFromInterval(200, 500);\n  return new Promise((onSuccess, onError) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        onSuccess({ id: transaction.id, time: delay });\n      } else {\n        onError(transaction.id);\n      }\n    }, delay);\n  });\n}\n\nconst logSuccess = ({id, time}) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);","const delay = ms => {\n  // Твой код\n    return new Promise((resolve) => {\n      setTimeout(() => {\n       resolve\n        }, delay)\n    })\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n    return new Promise((resolve) => {\n        const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n        );\n        resolve(updatedUsers)\n    })\n \n\n \n};\n\n\n\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","import './sass/main.scss';\nimport './task3';\nimport './task1';\nimport './task2';\n"]}