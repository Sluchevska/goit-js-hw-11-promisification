{"version":3,"sources":["task3.js","promise.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","onSuccess","onError","delay","setTimeout","id","logSuccess","time","console","log","logError","warn","amount","then","catch","ms","logger"],"mappings":";;;AAAA,MAAMA,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkB,CAACC,EAAaC,EAAWC,KACzCC,MAAAA,EAAQV,EAA0B,IAAK,KAE7CW,WAAW,KACUR,KAAKE,SAAW,GAGjCG,EAAUD,EAAYK,GAAIF,GAE1BD,EAAQF,EAAYK,KAErBF,IAGCG,EAAa,CAACD,EAAIE,KACtBC,QAAQC,mBAAmBJ,kBAAmBE,QAG1CG,EAAWL,IACfG,QAAQG,qCAAqCN,+BAM/CN,EAAgB,CAAEM,GAAI,GAAIO,OAAQ,KAAON,EAAYI,GACrDX,EAAgB,CAAEM,GAAI,GAAIO,OAAQ,KAAON,EAAYI,GACrDX,EAAgB,CAAEM,GAAI,GAAIO,OAAQ,IAAMN,EAAYI,GACpDX,EAAgB,CAAEM,GAAI,GAAIO,OAAQ,KAAON,EAAYI,GAIrDX,EAAgB,CAAEM,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETX,EAAgB,CAAEM,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETX,EAAgB,CAAEM,GAAI,GAAIO,OAAQ,KAC/BC,KAAKP,GACLQ,MAAMJ,GAETX,EAAgB,CAAEM,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ;;ACkDT,aApGA,QAAA,oBACA,QAAA,WACA,MAAMP,EAAQY,MAIRC,EAAST,GAAQC,QAAQC,sBAAsBF,aAGrDJ,GAAYU,KAAKG,SACjBb,GAAYU,KAAKG,SACjBb,GAAYU,KAAKG","file":"promise.ef9d3d5a.js","sourceRoot":"../src","sourcesContent":["const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction, onSuccess, onError) => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  setTimeout(() => {\n    const canProcess = Math.random() > 0.3;\n\n    if (canProcess) {\n      onSuccess(transaction.id, delay);\n    } else {\n      onError(transaction.id);\n    }\n  }, delay);\n};\n\nconst logSuccess = (id, time) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\nmakeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\nmakeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\nmakeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\nmakeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);","import './sass/main.scss';\nimport './task3'\nconst delay = ms => {\n  // Твой код\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд.\n// Значением исполнившегося промиса должно быть то кол - во миллисекунд которое передали во время вызова функции delay.\n\n// Задание 2\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, а принимала всего два параметра allUsers и userName и возвращала промис.\n\n// const users = [\n//   { name: 'Mango', active: true },\n//   { name: 'Poly', active: false },\n//   { name: 'Ajax', active: true },\n//   { name: 'Lux', active: false },\n// ];\n\n// const toggleUserState = (allUsers, userName, callback) => {\n//   const updatedUsers = allUsers.map(user =>\n//     user.name === userName ? { ...user, active: !user.active } : user,\n//   );\n\n//   callback(updatedUsers);\n// };\n\n// const logger = updatedUsers => console.table(updatedUsers);\n\n// /*\n//  * Сейчас работает так\n//  */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\n// /*\n//  * Должно работать так\n//  */\n// toggleUserState(users, 'Mango').then(logger);\n// toggleUserState(users, 'Lux').then(logger);\n// Задание 3\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, а принимала всего один параметр transaction и возвращала промис.\n\n// const randomIntegerFromInterval = (min, max) => {\n//   return Math.floor(Math.random() * (max - min + 1) + min);\n// };\n\n// const makeTransaction = (transaction, onSuccess, onError) => {\n//   const delay = randomIntegerFromInterval(200, 500);\n\n//   setTimeout(() => {\n//     const canProcess = Math.random() > 0.3;\n\n//     if (canProcess) {\n//       onSuccess(transaction.id, delay);\n//     } else {\n//       onError(transaction.id);\n//     }\n//   }, delay);\n// };\n\n// const logSuccess = (id, time) => {\n//   console.log(`Transaction ${id} processed in ${time}ms`);\n// };\n\n// const logError = id => {\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\n// };\n\n// /*\n//  * Работает так\n//  */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n// /*\n//  * Должно работать так\n//  */\n// makeTransaction({ id: 70, amount: 150 })\n//   .then(logSuccess)\n//   .catch(logError);\n\n// makeTransaction({ id: 71, amount: 230 })\n//   .then(logSuccess)\n//   .catch(logError);\n\n// makeTransaction({ id: 72, amount: 75 })\n//   .then(logSuccess)\n//   .catch(logError);\n\n// makeTransaction({ id: 73, amount: 100 })\n//   .then(logSuccess)\n//   .catch(logError);"]}