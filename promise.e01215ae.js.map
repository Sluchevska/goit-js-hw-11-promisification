{"version":3,"sources":["task3.js","task2.js","promise.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","Promise","onSuccess","onError","setTimeout","id","logSuccess","time","console","log","logError","warn","amount","then","catch","users","name","active","toggleUserState","allUsers","userName","resolve","map","user","logger","updatedUsers","table"],"mappings":";;;AAAA,MAAMA,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,IACjBC,MAAAA,EAAQR,EAA0B,IAAK,KACtC,OAAA,IAAIS,QAAQ,CAACC,EAAWC,KAC7BC,WAAW,KACUT,KAAKE,SAAW,GAGjCK,EAAUH,EAAYM,GAAIL,GAE1BG,EAAQJ,EAAYM,KAErBL,MAIDM,EAAa,CAACD,EAAIE,KACtBC,QAAQC,mBAAmBJ,kBAAmBE,QAG1CG,EAAWL,IACfG,QAAQG,qCAAqCN,+BAI/CP,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,KAC/BC,KAAKP,GACLQ,MAAMJ,GAETZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ;;AC1CT,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,IACxB,IAAInB,QAASoB,IAIhBA,EAHqBF,EAASG,IAAIC,GACtCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,MAY3DC,EAASC,GAAgBjB,QAAQkB,MAAMD,GAW7CP,EAAgBH,EAAO,SAASF,KAAKW,GACrCN,EAAgBH,EAAO,OAAOF,KAAKW;;AC/BnC,aAHA,QAAA,oBACA,QAAA,WACA,QAAA,WACA,QAAA","file":"promise.e01215ae.js","sourceRoot":"../src","sourcesContent":["const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  const delay = randomIntegerFromInterval(200, 500);\n  return new Promise((onSuccess, onError) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        onSuccess(transaction.id, delay);\n      } else {\n        onError(transaction.id);\n      }\n    }, delay);\n  });\n}\n\nconst logSuccess = (id, time) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n    return new Promise((resolve) => {\n        const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n        );\n        resolve(updatedUsers)\n    })\n \n\n \n};\n\n\n\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","import './sass/main.scss';\nimport './task3';\nimport './task1';\nimport './task2';\n"]}